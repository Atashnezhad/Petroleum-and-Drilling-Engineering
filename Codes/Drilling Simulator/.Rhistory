AwSTUD[i,1] <- AwTotal[i,1]-AwPDC[i,1]
AwW <- wSTUD*AwSTUD[i,1] + wPDC*AwPDC[i,1]
AwBeneathCutter <- AwW + AH[i,1]
#=========================================================
#=========================================================
#=========================================================
#=========================================================
#=======================Cutter #2=========================
EXPR_realtime[i,1] <- EXPR_new - BGDc8Cos[i,1] + BU_BGDc8Cos[i,1]
if (DepthOfCut_P[i,1] > EXPR_new+BU_BGDc8Cos[i,1]){
# cat("DOCP=",DepthOfCut_P[i,1]," > EXPR_new+BU_BGDc8Cos[i,1]",EXPR_new+BU_BGDc8Cos[i,1],"in i=",i,"in j=",j,"\n")
BU_DepthOfCut_P[i,1] <- DepthOfCut_P[i,1] - EXPR_new
BU_DOC_OCF[i,1] <- BU_DepthOfCut_P[i,1]/(cos(BR*pi/180))
colnames(BU_DOC_OCF) <- 'BU_DOC_OCF'
# AreaOnCutterFaceClean = AOCFC
BU_AOCFClean[i,1] <- (Rc^2)*acos((Rc-BU_DOC_OCF[i,1])/Rc)-(Rc-BU_DOC_OCF[i,1])*(2*Rc*BU_DOC_OCF[i,1]-(BU_DOC_OCF[i,1])^2)^0.5
colnames(BU_AOCFClean) <- 'BU_AOCFClean'
# AreaWornOutBG = AWOBG # worn out area on cutter face
BU_AWOBG[i,1] <- (Rc^2)*acos((Rc-BU_BGDc8[i,1])/Rc)-(Rc-BU_BGDc8[i,1])*(2*Rc*BU_BGDc8[i,1]-(BU_BGDc8[i,1])^2)^0.5
colnames(BU_AWOBG) <- 'BU_AWOBG'
#Area Cut Total = ACT # total aera on cutter face
BU_ACT[i,1] <- BU_AOCFClean[i,1] -BU_AWOBG[i,1]
colnames(BU_ACT) <- 'BU_ACT'
# area beneath the cutter
BU_AH[i,1] <- BU_ACT[i,1]*sin(BR*pi/180)
colnames(BU_AH) <- 'BU_AH'
# area infront of cutter
BU_AV[i,1] <- BU_ACT[i,1]*cos(BR*pi/180)*cos(SR*pi/180)
colnames(BU_AV) <- 'BU_AV'
#-----------------------------------------
#calc for Aw total
BU_Aw1 <- (BU_BG[i,1]*Dc/8)*cos(BR*pi/180)
BU_Aw2 <- (BU_Aw1-Lcutter*cos((90-BR)*pi/180))/sin((90-BR)*pi/180)
if (BU_Aw2<0){BU_Aw3 <- 0} else {BU_Aw3 <- BU_Aw2}
BU_Aw4 <- BU_Aw1/sin((90-BR)*pi/180)
if (BU_Aw4<Dc){BU_Aw5 <- BU_Aw4} else {BU_Aw5 <- Dc}
BU_Aw6 <- (BU_Aw5-Rc)/Rc
BU_Aw7 <- (BU_Aw3-Rc)/Rc
BU_Aw8 <- (BU_Aw5-Rc)
BU_Aw9 <- (BU_Aw3-Rc)
BU_Aw10 <- ((2*Rc*BU_Aw5-BU_Aw5^2)^0.5)/(Rc)^2
BU_Aw11 <- ((2*Rc*BU_Aw3-BU_Aw3^2)^0.5)/(Rc)^2
BU_Aw12 <- (Rc^2/2)*(asin(BU_Aw6)+BU_Aw8*BU_Aw10)
BU_Aw13 <- (Rc^2/2)*(asin(BU_Aw7)+BU_Aw9*BU_Aw11)
BU_Aw14 <- (BU_Aw12-BU_Aw13)*(2/cos((90-BR)*pi/180))
BU_AwTotal[i,1] <- BU_Aw14
BU_AwPDC1 <- (BU_BG[i,1]*Dc/8)*cos(BR*pi/180)
BU_AwPDC2 <- (BU_Aw1-CutterT*cos((90-BR)*pi/180))/sin((90-BR)*pi/180)
if (BU_AwPDC2<0){BU_AwPDC3 <- 0} else {BU_AwPDC3 <- BU_AwPDC2}
BU_AwPDC4 <- BU_AwPDC1/sin((90-BR)*pi/180)
if (BU_AwPDC4<Dc){BU_AwPDC5 <- BU_AwPDC4} else {BU_AwPDC5 <- Dc}
BU_AwPDC6 <- (BU_AwPDC5-Rc)/Rc
BU_AwPDC7 <- (BU_AwPDC3-Rc)/Rc
BU_AwPDC8 <- (BU_AwPDC5-Rc)
BU_AwPDC9 <- (BU_AwPDC3-Rc)
BU_AwPDC10 <- ((2*Rc*BU_AwPDC5-BU_AwPDC5^2)^0.5)/(Rc)^2
BU_AwPDC11 <- ((2*Rc*BU_AwPDC3-BU_AwPDC3^2)^0.5)/(Rc)^2
BU_AwPDC12 <- (Rc^2/2)*(asin(BU_AwPDC6)+BU_AwPDC8*BU_AwPDC10)
BU_AwPDC13 <- (Rc^2/2)*(asin(BU_AwPDC7)+BU_AwPDC9*BU_AwPDC11)
BU_AwPDC14 <- (BU_AwPDC12-BU_AwPDC13)*(2/cos((90-BR)*pi/180))
BU_AwPDC[i,1] <- BU_AwPDC14
BU_AwSTUD[i,1] <- BU_AwTotal[i,1]-BU_AwPDC[i,1]
BU_AwW <- wSTUD*BU_AwSTUD[i,1] + wPDC*BU_AwPDC[i,1]
BU_AwBeneathCutter <- BU_AwW + BU_AH[i,1]
}
else{
BU_AwBeneathCutter <- 0
}
#=========================================================
#=========================================================
#=========================================================
#=========================================================
#=========================================================
AwBeneathCutter_T=AwBeneathCutter+BU_AwBeneathCutter #total weighted area beneath the cutters
Diff_AwBeneathCutter_T_NeedToCovered[i,1] <- AwBeneathCutter_T -NeedToCovered[i,1]
}
DOC_real[i,1] <- DepthOfCut_P[i,1]- BGDc8Cos[i,1]
colnames(DOC_real) <- 'DOC_real'
AH_Matrix[i,1] <- AH[i,1]
colnames(AH) <- 'AH'
AV_Matrix[i,1] <- AV[i,1]
colnames(AV) <- 'AV'
FN1[i,1] <- AwBeneathCutter/AwBeneathCutter_T
if (DepthOfCut_P[i,1] > EXPR_new + BU_BGDc8Cos[i,1]){
BU_DOC_real[i,1] <- BU_DepthOfCut_P[i,1]- BU_BGDc8Cos[i,1]
colnames(BU_DOC_real) <- 'BU_DOC_real'
BU_AH_Matrix[i,1] <- BU_AH[i,1]
colnames(BU_AH) <- 'BU_AH'
BU_AV_Matrix[i,1] <- BU_AV[i,1]
colnames(BU_AV) <- 'BU_AV'
FN2[i,1] <- BU_AwBeneathCutter/AwBeneathCutter_T
}
else{
BU_DOC_real[i,1] <- 0
colnames(BU_DOC_real) <- 'BU_DOC_real'
BU_AH_Matrix[i,1] <- 0
colnames(BU_AH) <- 'BU_AH'
BU_AV_Matrix[i,1] <- 0
colnames(BU_AV) <- 'BU_AV'
FN2[i,1] <- 0
}
#==================================================WEAR AND TEMPRATURE================================================
#==================================================WEAR AND TEMPRATURE================================================
#==================================================WEAR AND TEMPRATURE================================================
#==================================================WEAR AND TEMPRATURE================================================
#==================================================WEAR AND TEMPRATURE================================================
#==================================================WEAR AND TEMPRATURE================================================
if (EXPR_realtime[i,1] > 0){
# calculations for cutter 1 and 2 for temprature and wear when the EXPR is not zero. Cutters are not in the same level.
# for cutter 1
##############
##############
##############
##############
cutter_wearflat_length[i,1] <- (BG[i,1]*Dc/8)/sin(pi*BR/180)*2.54
colnames(cutter_wearflat_length) <- 'cutter_wearflat_length,cm'
Tw[i,1] <- Tf[i,1]+((kf[i,1]*(FN1[i,1]*WOC[i,1])*Cutter_Velocity[i,1]*f[i,1])/(AwTotal[i,1]*6.4516))*
((1+(3*(pi^0.5)/4)*f[i,1]*khf[i,1]*(Cutter_Velocity[i,1]/(cutter_wearflat_length[i,1]*alpha_f[i,1]))^0.5)^-1)
#============================================================wear function
work1[i,1] <- (0.083*kf[i,1]*(FN1[i,1]*WOC[i,1])*RPM[i,1]*(2*pi*Re))*(DataTimeInter/60)
work2[i,1] <- 0#(0.083*Ce*AV_Matrix[i,1]*(2*pi*Re)*RPM[i,1]*CCS[i,1])*(DataTimeInter/60)
workT[i,1] <- work1[i,1] + work2[i,1]
alphaAve[i,1] <- (AwPDC[i,1]/AwTotal[i,1])*wear_cof_PDC+(AwSTUD[i,1]/AwTotal[i,1])*wear_cof_STUD
length(alphaAve);length(AwPDC);length(AwTotal);length(AwSTUD);
cutter_worn_vol_each_datapoint[i,1] <- workT[i,1]/alphaAve[i,1]
cwv <- cutter_worn_vol_each_datapoint[i,1]+ cwv
comulative_cutter_worn_vol[i,1] <- cwv
#calculate the BG by reverse cutter volume equation
V_total_worn_theory <- 0
while(V_total_worn_theory - comulative_cutter_worn_vol[i,1] < wornVol_accuracy){
BG[i,1] <- BG[i,1] + addBG
V_total_worn_theory <- (-1)*((((Dc/2)^3)/tan(pi*BR/180))*
((((Dc/2)-(BG[i,1]*Dc/8))/(Dc/2))*acos((((Dc/2)-(BG[i,1]*Dc/8))/(Dc/2)))-
((1-((((Dc/2)-(BG[i,1]*Dc/8))/(Dc/2)))^2))^0.5)+(((Dc/2)^3)/3*tan(pi*BR/180))*
((1-((((Dc/2)-(BG[i,1]*Dc/8))/(Dc/2)))^2)^0.5)^3)
}
#update BG that is used for next ROP calculations
BG[i+1,1] <- BG[i,1]
#for cutter 2 or back up cutter ==== if it is engaged with formation or NOT
##############
##############
##############
##############
if (DepthOfCut_P[i,1] > EXPR_new+BU_BGDc8Cos[i,1]){
BU_cutter_wearflat_length[i,1] <- (BU_BG[i,1]*Dc/8)/sin(pi*BR/180)*2.54
colnames(BU_cutter_wearflat_length) <- 'BU_cutter_wearflat_length,cm'
BU_Tw[i,1] <- Tf[i,1]+((kf[i,1]*(FN2[i,1]*WOC[i,1])*Cutter_Velocity[i,1]*f[i,1])/(BU_AwTotal[i,1]*6.4516))*
((1+(3*(pi^0.5)/4)*f[i,1]*khf[i,1]*(Cutter_Velocity[i,1]/(BU_cutter_wearflat_length[i,1]*alpha_f[i,1]))^0.5)^-1)
#============================================================wear function
BU_work1[i,1] <- (0.083*kf[i,1]*(FN2[i,1]*WOC[i,1])*RPM[i,1]*(2*pi*Re))*(DataTimeInter/60)
BU_work2[i,1] <- 0#(0.083*Ce*BU_AV_Matrix[i,1]*(2*pi*Re)*RPM[i,1]*CCS[i,1])*(DataTimeInter/60)
BU_workT[i,1] <- BU_work1[i,1] + BU_work2[i,1]
BU_alphaAve[i,1] <- (BU_AwPDC[i,1]/BU_AwTotal[i,1])*wear_cof_PDC+(BU_AwSTUD[i,1]/BU_AwTotal[i,1])*wear_cof_STUD
BU_cutter_worn_vol_each_datapoint[i,1] <- BU_workT[i,1]/BU_alphaAve[i,1]
BU_cwv <- BU_cutter_worn_vol_each_datapoint[i,1]+ BU_cwv
BU_comulative_cutter_worn_vol[i,1] <- BU_cwv
#calculate the BU_BG by reverse cutter volume equation
# wornVol_accuracy <- 0.001
BU_V_total_worn_theory <- 0
while(BU_V_total_worn_theory - BU_comulative_cutter_worn_vol[i,1] < wornVol_accuracy){
BU_BG[i,1] <- BU_BG[i,1] + addBG
BU_V_total_worn_theory <- (-1)*((((Dc/2)^3)/tan(pi*BR/180))*
((((Dc/2)-(BU_BG[i,1]*Dc/8))/(Dc/2))*acos((((Dc/2)-(BU_BG[i,1]*Dc/8))/(Dc/2)))-
((1-((((Dc/2)-(BU_BG[i,1]*Dc/8))/(Dc/2)))^2))^0.5)+(((Dc/2)^3)/3*tan(pi*BR/180))*
((1-((((Dc/2)-(BU_BG[i,1]*Dc/8))/(Dc/2)))^2)^0.5)^3)
}
#update BG that is used for next ROP calculations
BU_BG[i+1,1] <- BU_BG[i,1]
}
else{
BU_BG[i+1,1] <- BU_BG[i,1]
BU_cwv <- BU_cutter_worn_vol_each_datapoint[i,1]+ BU_cwv
BU_comulative_cutter_worn_vol[i,1] <- BU_cwv
}
}
# if EXPR realtime achived 0 and both cutters are in same lavel, then:
# calc BG1 and 2 seperatly and take an average and report it for both BGs
else{
EXPR_realtime[i,1] <- 0
# for cutter 1
##############
##############
##############
##############
cutter_wearflat_length[i,1] <- (BG[i,1]*Dc/8)/sin(pi*BR/180)*2.54
colnames(cutter_wearflat_length) <- 'cutter_wearflat_length,cm'
Tw[i,1] <- Tf[i,1]+((kf[i,1]*FN1[i,1]*Cutter_Velocity[i,1]*f[i,1])/(AwTotal[i,1]*6.4516))*
((1+(3*(pi^0.5)/4)*f[i,1]*khf[i,1]*(Cutter_Velocity[i,1]/(cutter_wearflat_length[i,1]*alpha_f[i,1]))^0.5)^-1)
#============================================================wear function
work1[i,1] <- (0.083*kf[i,1]*FN1[i,1]*RPM[i,1]*(2*pi*Re))*(DataTimeInter/60)
work2[i,1] <- 0#(0.083*Ce*AV_Matrix[i,1]*(2*pi*Re)*RPM[i,1]*CCS[i,1])*(DataTimeInter/60)
workT[i,1] <- work1[i,1] + work2[i,1]
alphaAve[i,1] <- (AwPDC[i,1]/AwTotal[i,1])*wear_cof_PDC + (AwSTUD[i,1]/AwTotal[i,1])*wear_cof_STUD
cutter_worn_vol_each_datapoint[i,1] <- workT[i,1]/alphaAve[i,1]
cwv <- cutter_worn_vol_each_datapoint[i,1]+ cwv
comulative_cutter_worn_vol[i,1] <- cwv
# for cutter 2 or back up cutter
##############
##############
##############
##############
BU_cutter_wearflat_length[i,1] <- (BU_BG[i,1]*Dc/8)/sin(pi*BR/180)*2.54
colnames(BU_cutter_wearflat_length) <- 'BU_cutter_wearflat_length,cm'
BU_Tw[i,1] <- Tf[i,1]+((kf[i,1]*FN2[i,1]*Cutter_Velocity[i,1]*f[i,1])/(BU_AwTotal[i,1]*6.4516))*
((1+(3*(pi^0.5)/4)*f[i,1]*khf[i,1]*(Cutter_Velocity[i,1]/(BU_cutter_wearflat_length[i,1]*alpha_f[i,1]))^0.5)^-1)
#============================================================wear function
BU_work1[i,1] <- (0.083*kf[i,1]*FN2[i,1]*RPM[i,1]*(2*pi*Re))*(DataTimeInter/60)
BU_work2[i,1] <- 0#(0.083*Ce*BU_AV_Matrix[i,1]*(2*pi*Re)*RPM[i,1]*CCS[i,1])*(DataTimeInter/60)
BU_workT[i,1] <- BU_work1[i,1] + BU_work2[i,1]
BU_alphaAve[i,1] <- (BU_AwPDC[i,1]/BU_AwTotal[i,1])*wear_cof_PDC+(BU_AwSTUD[i,1]/BU_AwTotal[i,1])*wear_cof_STUD
BU_cutter_worn_vol_each_datapoint[i,1] <- BU_workT[i,1]/BU_alphaAve[i,1]
BU_cwv <- BU_cutter_worn_vol_each_datapoint[i,1]+ BU_cwv
BU_comulative_cutter_worn_vol[i,1] <- BU_cwv
#calculate the BG by reverse cutter volume equation
# wornVol_accuracy <- 0.001
V_total_worn_theory <- 0
#calculate the BU_BG by reverse cutter volume equation
# wornVol_accuracy <- 0.001
BU_V_total_worn_theory <- 0
while((V_total_worn_theory+BU_V_total_worn_theory) - (comulative_cutter_worn_vol[i,1]+BU_comulative_cutter_worn_vol[i,1]) < wornVol_accuracy){
BG[i,1] <- BG[i,1] + addBG
BU_BG[i,1] <- BU_BG[i,1] + addBG
V_total_worn_theory <- (-1)*((((Dc/2)^3)/tan(pi*BR/180))*
((((Dc/2)-(BG[i,1]*Dc/8))/(Dc/2))*acos((((Dc/2)-(BG[i,1]*Dc/8))/(Dc/2)))-
((1-((((Dc/2)-(BG[i,1]*Dc/8))/(Dc/2)))^2))^0.5)+(((Dc/2)^3)/3*tan(pi*BR/180))*
((1-((((Dc/2)-(BG[i,1]*Dc/8))/(Dc/2)))^2)^0.5)^3)
BU_V_total_worn_theory <- (-1)*((((Dc/2)^3)/tan(pi*BR/180))*
((((Dc/2)-(BU_BG[i,1]*Dc/8))/(Dc/2))*acos((((Dc/2)-(BU_BG[i,1]*Dc/8))/(Dc/2)))-
((1-((((Dc/2)-(BU_BG[i,1]*Dc/8))/(Dc/2)))^2))^0.5)+(((Dc/2)^3)/3*tan(pi*BR/180))*
((1-((((Dc/2)-(BU_BG[i,1]*Dc/8))/(Dc/2)))^2)^0.5)^3)
}
#update BG and BU_BG by taking average of both
BG[i+1,1] <- BG[i,1]
BU_BG[i+1,1] <- BU_BG[i,1]
}
BGDc8[i+1,1] <- BG[i+1,1]*Dc/8
BGDc8Cos[i+1,1] <- BGDc8[i+1,1]*cos(BR*pi/180)
BU_BGDc8[i+1,1] <- BU_BG[i+1,1]*Dc/8
BU_BGDc8Cos[i+1,1] <- BU_BGDc8[i+1,1]*cos(BR*pi/180)
ROP[i,1] <- ROPcoff*(5*RPM[i,1]*Re*Ce*((AV_Matrix[i,1]+BU_AV_Matrix[i,1])/2)/(pi*Db*Db/4))
cat("in i=",i,"in j=",j,"\n")
cat("DOCP=",DepthOfCut_P[i,1],"BU_DOCP=",BU_DepthOfCut_P[i,1],"MaxDOC=",Max_DOC,"\n")
cat("Diff_AwBeneathCutter_T_NeedToCovered[i,1]=",Diff_AwBeneathCutter_T_NeedToCovered[i,1],"< DOC_accuracy=",DOC_accuracy,"\n")
cat("FN1=",FN1[i,1],"FN2=",FN2[i,1],"\n")
cat("EXPR_realtime=",EXPR_realtime[i,1],"EXPR_new=",EXPR_new,
"BGDc8Cos[i,1]=",BGDc8Cos[i,1],"BU_BGDc8Cos[i,1]=",BU_BGDc8Cos[i,1],"\n")
cat("BG=",BG[i,1],"BU_BG=",BU_BG[i,1],"\n")
cat("Av=",AV_Matrix[i,1],"AH=",AH_Matrix[i,1],"BU_Av=",BU_AV_Matrix[i,1],"BU_AH=",BU_AH_Matrix[i,1],"ROP=",ROP[i,1],"\n")
cat("AwW=",AwW,"BU_AwW=",BU_AwW,"AwBeneathCutter_T=",AwBeneathCutter_T,"\n")
cat("AwBeneathCutter=",AwBeneathCutter,"BU_AwBeneathCutter=",BU_AwBeneathCutter,"AwBeneathCutter_T=",AwBeneathCutter_T,"\n")
cat("alphaAve=",alphaAve[i,1],"BU_alphaAve=",BU_alphaAve[i,1])
print("-----------------------------------------------------------------------------------------")
print("-----------------------------------------------------------------------------------------")
print("-----------------------------------------------------------------------------------------")
if (DepthOfCut_P[i,1] > EXPR_new+BU_BGDc8Cos[i,1]){
BU_cutter_engage[i,1] <- 1
} else {
BU_cutter_engage[i,1] <- 0
}
}
#==========================================================================
#==========================================================================
#==========================================================================
#==========================================================================
#==========================================================================
#==========================================================================
#######################PLOTS
# #WOB
par(mfrow=c(1,9))
a <- data.frame(seq(1,Num_of_Data))
par(cex = 0.5)
# # #---------------------------------
# plot(WOB[,1],a[,1], ylim = rev(range(a[,1])), ylab = "Depth ft", xlab = "", col="blue",
#      pch=1,title(expression(main = "WOB (lbf)"), adj = 0.5, line = 2, col.main = "blue"),xlim = c(0,45000))
# par(new=TRUE)
# #CCS
# lines(CCS[,1],a[,1], ylim = rev(range(a[,1])), axes=F, ylab = NA, xlab = NA,
#      col="red",pch=2,title(expression(main = "CCS (psi)"), adj = 0.5, line = 0.7, col.main = "red"),xlim = c(0,50000))
# par(new=FALSE)
# # #RPM
# plot(RPM[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",
#      col="red",pch=1,title(expression(main = "RPM"), col.main = "red"),xlim = c(0,400))
#cutter_worn_vol_each_datapoint / Front cutter
plot(cutter_worn_vol_each_datapoint[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,max(cutter_worn_vol_each_datapoint[,1])),
col="black",pch=1,title(expression(main = "Front cutter worn volume/data point(in3)"),adj = 0.5, line = 1.9, col.main = "black"))
# axis(3)
par(new=TRUE)
#cutter_worn_vol_each_datapoint / Back up cutter
lines(BU_cutter_worn_vol_each_datapoint[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="red",pch=1,title(expression(main = "Backup Cutter worn volume/data point(in3)"),adj = 0.5, line = 0.7, col.main = "red"))
par(new=FALSE)
#comulative_cutter_worn_vol / Front cutter
plot(comulative_cutter_worn_vol[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,max(comulative_cutter_worn_vol[,1])),
col="black",pch=1,title(expression(main = "Front cutter Comulative worn volume (in3)"), adj = 0.5, line = 1.9, col.main = "black"))
par(new=TRUE)
#comulative_cutter_worn_vol / Back up cutter
lines(BU_comulative_cutter_worn_vol[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="red",pch=2,title(expression(main = "Backup cutter Comulative worn volume (in3)"), adj = 0.5, line = 0.7, col.main = "red"))
par(new=FALSE)
#
# #ROP
# plot(ROP[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",
#      col="black",pch=1,title(expression(main = "ROP (ft/hr)")),xlim = c(0,500))
# par(new=FALSE)
#BG
plot(BG[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,8),
col="black",pch=1,title(expression(main = "Front Cutter BG"), col.main = "black"))
abline(v=8, col = "red", lty = 3)
par(new=TRUE)
#BU_BG
lines(BU_BG[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="blue",pch=2,title(expression(main = "Back up Cutter BG"), adj = 0.5, line = 0.7, col.main = "blue"),xlim = c(0,10))
par(new=FALSE)
#DOC_real
plot(DOC_real[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,0.2),
col="black",pch=1,title(expression(main = "Front cutter real depth of cut (in)"), adj = 0.5, line = 3.2, col.main = "black"))
abline(v=EXPR_new, col = "gray60", lty = 1)
text(EXPR_new-0.005,Num_of_Data,"EXPR New",srt=90,pos=3,col="gray60")
abline(v=0, col = "gray60", lty = 1)
text(0.01,3,"EXPR = 0",srt=90,pos=3,col="gray60")
par(new=TRUE)
#DOC_real
lines(BU_DOC_real[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="red",pch=2,title(expression(main = "Back Up cutter real depth of cut (in)"), adj = 0.5, line = 1.9, col.main = "red"))
par(new=TRUE)
#EXPR_realtime
lines(EXPR_realtime[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="blue",pch=3,title(expression(main = "Real time Exposure (in)"),
adj = 0.5, line = 0.7, col.main = "blue"),xlim = c(0,EXPR_new))
par(new=FALSE)
# #BU_cutter_engage
# plot(BU_cutter_engage[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,1),
#      col="black",pch=1,title(expression(main = "Back up cutter engage\n 0=NO   1=YES"), col.main = "black"))
#==========================================================================
#==========================================================================
#==========================================================================
#==========================================================================
#==========================================================================
#==========================================================================
# par(mfrow=c(1,5))
# par(cex = 0.5)
#AwSTUD
plot(AwSTUD[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", xlim = c(0,max(AwSTUD[1:99,1],AwPDC[1:99,1],AH_Matrix[1:99,1],AV_Matrix[1:99,1])),
col="green",pch=4,title(expression(main = "AwSTUD"), adj = 0.75, line = 1.5, col.main = "green"))
#AH
lines(AH_Matrix[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",axes=F,
col="blue",pch=1,title(expression(main = "AH"), adj = 0.35, line = 3, col.main = "blue"))
# abline(v=8, col = "red", lty = 3)
par(new=TRUE)
#AV
lines(AV_Matrix[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="black",pch=2,title(expression(main = "AV"), adj = 0.6, line = 3, col.main = "black"))
par(new=TRUE)
#AwPDC
lines(AwPDC[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="red",pch=3,title(expression(main = "AwPDC"), adj = 0.3, line = 1.5, col.main = "red"))
par(new=FALSE)
#BU_AwSTUD
plot(BU_AwSTUD[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", xlim = c(0,max(BU_AwSTUD[1:99,1],BU_AwPDC[1:99,1],BU_AH_Matrix[1:99,1],BU_AV_Matrix[1:99,1])),
col="green",pch=4,title(expression(main = "BU_AwSTUD"), adj = 1, line = 1.5, col.main = "green"))
#BU_AH
lines(BU_AH_Matrix[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",axes=F,
col="blue",pch=1,title(expression(main = "BU_AH"), adj = 0.3, line = 3, col.main = "blue"))
# abline(v=8, col = "red", lty = 3)
par(new=TRUE)
#BU_AV
lines(BU_AV_Matrix[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="black",pch=2,title(expression(main = "BU_AV"), adj = 0.8, line = 3, col.main = "black"))
par(new=TRUE)
#BU_AwPDC
lines(BU_AwPDC[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="red",pch=3,title(expression(main = "BU_AwPDC"), adj = 0.1, line = 1.5, col.main = "red"))
par(new=FALSE)
#Tw
logTw <- log(Tw)
logBU_Tw <-log(BU_Tw+1)
plot(logTw[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,15),
col="black",pch=1,title(expression(main = "Log(Tw) (c)"), adj = 0.5, line = 1.9, col.main = "black"))
abline(v=log(600), col = "black", lty = 3)
text(log(600),Num_of_Data,"T = 6 0 0 C",srt=90,pos=3,col="black")
par(new=TRUE)
#BU_Tw
lines(logBU_Tw[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="blue",pch=2,title(expression(main = "Log(BU_Tw) (c)"), adj = 0.5, line = 0.7, col.main = "blue"))
#FN 1 & 2
plot(FN1[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,max(FN1[,1])),
col="black",pch=1,title(expression(main = "FN1 (lbf)"), adj = 0.5, line = 1.9, col.main = "black"))
par(new=TRUE)
lines(FN2[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",
col="blue",pch=2,title(expression(main = "FN2 (lbf)"), adj = 0.5, line = 0.7, col.main = "blue"))
#BU_cutter_engage
plot(BU_cutter_engage[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,1),
col="black",pch=1,title(expression(main = "Back up cutter engage\n 0=NO   1=YES"), col.main = "black"))
#==================================================================================================================================
#==================================================================================================================================
#==================================================================================================================================
#==================================================================================================================================
#==================================================================================================================================
#==================================================================================================================================
# end_time <- Sys.time()
# end_time - start_time
par(mfrow=c(1,9))
par(cex = 0.5)
par(new=FALSE)
#WOB
plot(WOB[,1],a[,1], ylim = rev(range(a[,1])), ylab = "Depth ft", xlab = "", col="blue",
pch=1,title(expression(main = "WOB (lbf)"), adj = 0.5, line = 2, col.main = "blue"),xlim = c(0,max(WOB,CCS)+10000))
par(new=TRUE)
#CCS
lines(CCS[,1],a[,1], ylim = rev(range(a[,1])), axes=F, ylab = NA, xlab = NA,
col="red",pch=2,title(expression(main = "CCS (psi)"), adj = 0.5, line = 0.7, col.main = "red"),xlim = c(0,max(CCS)+10000))
par(new=FALSE)
# #CCS
# lines(CCS[,1],a[,1], ylim = rev(range(a[,1])), axes=F, ylab = NA, xlab = NA,
#      col="red",pch=2,title(expression(main = "CCS (psi)"), adj = 0.5, line = 0.7, col.main = "red"),xlim = c(0,50000))
# par(new=FALSE)
#RPM
plot(RPM[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",
col="red",pch=1,title(expression(main = "RPM"), col.main = "red"),xlim = c(0,400))
#ROP
plot(ROP[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",
col="black",pch=1,title(expression(main = "ROP (ft/hr)")),xlim = c(0,max(ROP)+200))
abline(v=0, col = "red", lty = 3)
abline(v=max(ROP), col = "red", lty = 3)
text(max(ROP)+50,5,"MAX ROP",srt=90,pos=3,col="black")
par(new=FALSE)
#
# #work1
# plot(work1[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,max(work1)),
#      col="black",pch=1,title(expression(main = "work1"), col.main = "black"))
# # abline(v=8, col = "red", lty = 3)
# par(new=TRUE)
# #BU_work1
# lines(BU_work1[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
#       col="blue",pch=2,title(expression(main = "BU_work1"), adj = 0.5,
#                              line = 0.7, col.main = "blue"),xlim = c(0,10))
# par(new=FALSE)
# #work2
# plot(work2[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,max(work2)),
#      col="black",pch=1,title(expression(main = "work2"), col.main = "black"))
# # abline(v=8, col = "red", lty = 3)
# par(new=TRUE)
# #BU_work2
# lines(BU_work2[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
#       col="blue",pch=2,title(expression(main = "BU_work2"), adj = 0.5,
#                              line = 0.7, col.main = "blue"),xlim = c(0,10))
#workT
plot(workT[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,max(workT)),
col="black",pch=1,title(expression(main = "workT"), col.main = "black"))
# abline(v=8, col = "red", lty = 3)
par(new=TRUE)
#workT
lines(BU_workT[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="blue",pch=2,title(expression(main = "BU_workT"), adj = 0.5,
line = 0.7, col.main = "blue"),xlim = c(0,10))
par(new=FALSE)
#BG
plot(BG[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,8),
col="black",pch=1,title(expression(main = "Front Cutter BG"), col.main = "black"))
abline(v=8, col = "red", lty = 3)
par(new=TRUE)
#BU_BG
lines(BU_BG[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
col="blue",pch=2,title(expression(main = "Back up Cutter BG"), adj = 0.5, line = 0.7,
col.main = "blue"),xlim = c(0,10))
par(new=FALSE)
#BU_cutter_engage
plot(BU_cutter_engage[1:99,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",xlim = c(0,1),
col="black",pch=1,title(expression(main = "Back up cutter engage\n 0=NO   1=YES"), col.main = "black"))
#
# #alphaAve & BU_alphaAve
# plot(alphaAve[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",
#      col="black",pch=1,title(expression(main = "alphaAve"),adj = 0.5, line = 1.9, col.main = "black"),
#      xlim = c(0,max(alphaAve,BU_alphaAve)))
# par(new=TRUE)
# plot(BU_alphaAve[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "", axes=F,
#      col="red",pch=2,title(expression(main = "BU_alphaAve"),adj = 0.5, line = 0.7, col.main = "red"))
Ab <- pi*(Db/2)^2
MSE <- WOB*((1/Ab)+((13.33*kf*RPM)/(Db*ROP)))
#MSE
plot(MSE[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",
col="black",pch=1,title(expression(main = "MSE"),adj = 0.5, line = 3.2, col.main = "black"),
xlim = c(0,max(MSE,WOB,CCS)+10000))
#WOB
lines(WOB[,1],a[,1], ylim = rev(range(a[,1])), ylab = "Depth ft", xlab = "", col="blue",axes=F,
pch=1,title(expression(main = "WOB (lbf)"), adj = 0.5, line = 2, col.main = "blue"))
par(new=TRUE)
#CCS
lines(CCS[,1],a[,1], ylim = rev(range(a[,1])), axes=F, ylab = NA, xlab = NA,axes=F,
col="red",pch=2,title(expression(main = "CCS (psi)"), adj = 0.5, line = 0.7, col.main = "red"),xlim = c(0,max(CCS)+10000))
par(new=FALSE)
f1 <- DataTimeInter*(ROP/3600)
f2 <- cumsum(f1)
colnames(f2) <-'depth (ft)'
#DD(ft)
plot(a[,1],f2[,1], ylim = rev(range(f2[,1])),ylab = "Depth (ft)",xlab = "",
col="black",pch=1,title(expression(main = "Drilling time (sec)"),adj = 0.5, line = 1.9, col.main = "black"),
xlim = c(0,max(a)))
# #Drilling_Depth_(ft)
# plot(f2[,1],a[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",
#      col="black",pch=1,title(expression(main = "Drilling Depth (ft)"),adj = 0.5, line = 1.9, col.main = "black"),
#      xlim = c(0,max(f2)))
#
# #
# barplot(f1[,1], ylim = rev(range(a[,1])),ylab = "",xlab = "",
#      col="black",pch=1,title(expression(main = "Drilling Depth (ft)"),adj = 0.5, line = 1.9, col.main = "black"),
#      xlim = c(0,max(f2)))
blue <- rgb(0.8, 0.5, 0.7, alpha=1)
red <- rgb(1, 0, 0, alpha=0.4)
barplot(f1[99:1,1],horiz = T,main = "Drilling length (ft)\n per Data point", col=blue)#, xlim = max(f1,f2))
# par(new=TRUE)
# barplot(f2[99:1,1],horiz = T,axes=F, col=red)
